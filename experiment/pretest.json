{
    "version": 2.0,
    "questions": [
        {
            "question": "1. Which of the following is not an array?",
            "answers": {
                "a": "[1, 4, 3, 10]",
                "b": "[“A”, True, “Yes”, “Hello world”] ",
                "c": "[“Test”, “False”, “x”, “hi”]",
                "d": "[True, False, False, True]"
            },
            "correctAnswer": "b",
            "explanations": {
                "a": "All the elements are of the same type (integer).",
                "b": "This option contains a mix of different types such as strings and boolean values.",
                "c": "All the elements are strings.",
                "d": "All the elements are boolean values."
            },
            "difficulty": "beginner"
        },
        {
            "question": "2. Which of the following is an array sorted in descending order?",
            "answers": {
                "a": "-17, -14, -8, -19",
                "b": "-17, 20, 20, 100",
                "c": "900, 14, -100, -1",
                "d": "100, 100, 10, 0"
            },
            "correctAnswer": "d",
            "explanations": {
                "a": "-8 and -17 must be swapped as -8 > -17 and -14 > -17.",
                "b": "This array is in ascending order. It must be reversed to be the correct answer.",
                "c": "-1 and -100 must be swapped as -1 > -100.",
                "d": "This sequence is in descending order."
            },
            "difficulty": "beginner"
        },
        {
            "question": "3. Consider the following arrays: <br>A = [5, -5, 10, 1]<br>B = [0, 100, 1, 0]<br>Which of the following arrays represents the combination of the 2 arrays in a sorted order(assume ascending order)?",
            "answers": {
                "a": "[5, -5, 10, 1, 0, 100, 1, 0]",
                "b": "[0, 100, 1, 0, 5, -5, 10, 1]",
                "c": "[0, 0, 1, 1, -5,  5, 10, 100]",
                "d": "[-5, 0, 0, 1, 1, 5, 10 ,100]"
            },
            "correctAnswer": "d",
            "explanations": {
                "a": "This answer simply involves combining the two arrays one after the other (here B after A). This array is not sorted in ascending order.",
                "b": "This answer simply involves combining the two arrays one after the other (here A after B). This array is not sorted in ascending order.",
                "c": "-5 must come right at the beginning of the array as -5 < 0 and -5 < 1.",
                "d": "This array is the right combination of the two arrays in ascending order as all elements are present from both the arrays in a sorted order."
            },
            "difficulty": "intermediate"
        },
        {
            "question": "4. When dividing an array into equal sized partitions (as closely as possible), how does the time complexity of the overall algorithm vary with the number of partitions made per step (fixed number per step)? Note that the number of partitions directly affects the size of the partitions. Greater the number of partitions, the smaller each partition will be.",
            "answers": {
                "a": "Does not vary, i.e, is independent of the number of partitions made per step",
                "b": "Depends on the situation",
                "c": "Is inversely proportional, i.e, the time complexity decreases with increase in the number of partitions being made per step",
                "d": "Is directly proportional, i.e, the time complexity increases with increase in the number of partitions being made per step"
            },
            "correctAnswer": "c",
            "explanations": {
                "a": "There is a correlation between the two, i.e, changing the number of partitions does affect the time complexity.",
                "b": "The correlation between the two is fixed and does not vary with the array or any other factors, i.e, is independent of the situation.",
                "c": "This can be understood by the fact that fewer division steps/operations are required. The number of division operations required is given by ceil(logb n) where ceil rounds up to the nearest integer, n is the array size and b is the number of partitions per step. This value only decreases with increase in the value of b and hence complexity decreases.",
                "d": "The correlation is not direct. Increasing the number of partitions leads to a decrease in the number of division operations required which can not result in an increase in the time complexity."
            },
            "difficulty": "Advanced"
        }
    ]
}
