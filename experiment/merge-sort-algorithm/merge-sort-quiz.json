{
    "version": 2.0,
    "questions": [
        {
            "question": "1. Consider the following array:<br>A = [9, 100, -1, 4, 8, 6, 9]<br>Determine the number of iterations of division (same as the number of iterations of merging) as well as the total number of division operations that will be required for the above array.",
            "answers": {
                "a": "2 and 6",
                "b": "3 and 6",
                "c": "6 and 2",
                "d": "6 and 3"
            },
            "correctAnswer": "b",
            "explanations": {
                "a": "The number of iterations is given by ceil(log2 n) where ceil rounds up to the nearest integer and n is the array size. This value of number of iterations is probably obtained when the log result is rounded down instead of up.",
                "b": "The number of iterations is given by ceil(log2 n) where ceil rounds up to the nearest integer and n is the array size. We require 1 + 2 + 3 = 6 divisions in all. The first division breaks the array into two arrays of sizes 3 and 4. Next, we divide the two subarrays itself to give four subarrays of sizes 1, 2, 2 and 2. Finally we divide all three subarrays of size 2.",
                "c": "This answer is probably obtained by misinterpreting the question. The answer asks for the number of recursions/iterations before our array is completely broken down to its individual elements and the number of divisions in that order. The number of iterations is given by ceil(log2 n) where ceil rounds up to the nearest integer and n is the array size. The number of divisions can be obtained by doing a dry run of the algorithm till the part where the array is completely broken down while counting the number of divisions as we do the run.",
                "d": "This answer is probably obtained by misinterpreting the question. The answer asks for the number of recursions/iterations before our array is completely broken down to its individual elements and the number of divisions in that order. The number of iterations is given by ceil(log2 n) where ceil rounds up to the nearest integer and n is the array size. The number of divisions can be obtained by doing a dry run of the algorithm till the part where the array is completely broken down while counting the number of divisions as we do the run."
            },
            "difficulty": "intermediate"
        },
        {
            "question": "2. During which step does the actual sorting occur?",
            "answers": {
                "a": "Division",
                "b": "Separate step for sorting",
                "c": "Merging",
                "d": "None of the above"
            },
            "correctAnswer": "c",
            "explanations": {
                "a": "No sorting occurs during division. The array is simply repeatedly divided into sub-arrays until it is completely broken down into its individual elements in this step.",
                "b": "No explicit/separate step exists for merging. We first recursively divide the array into subarrays until each subarray contains a single element and then recursively merge these subarrays. The sorting occurs during one of these steps itself.",
                "c": "During merging, we merge the subarrays in an order such that the merged array is sorted.",
                "d": "One of the other options does contain the answer."
            },
            "difficulty": "intermediate"
        },
        {
            "question": "3. Which of the following accurately describes the merge step in the algorithm (assume ascending order sort)?",
            "answers": {
                "a": "We directly merge with 1 sub-array after the other.",
                "b": "We iterate through each of the concerned sub-arrays simultaneously where we add the smaller of the elements under consideration at that point to the merged array and advance the index for the array from which the element was selected.",
                "c": "We alternate between the elements of the two sub-arrays, i.e, first we pick one element from the 1st sub-array and then pick another element at the same index in the other sub-array.",
                "d": "None of the above."
            },
            "correctAnswer": "b",
            "explanations": {
                "a": "This would not work even though the two sub-arrays are sorted. It is not necessary that all the elements of the 1st sub-array are smaller than all the elements of the 2nd sub-array.",
                "b": "This accurately fits the logic followed in the merge step. Since the sub-arrays are sorted already, we only have to compare 2 elements at each step (and not all the pairs of elements) and accordingly advance the index in the selected sub-array only.",
                "c": "This would not work even though the two sub-arrays are sorted. It is not necessary that the sub-arrays follow such an order where they can simply be merged alternately to get a sorted array.",
                "d": "One of the other options does fit the description for the merge step."
            },
            "difficulty": "intermediate"
        }
    ]
}
